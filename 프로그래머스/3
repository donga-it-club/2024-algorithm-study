public class Solution {
    public int solution(int m, int n, int[][] puddles) {
        // DP 테이블 초기화
        int[][] dp = new int[m+1][n+1];
        
        // 물에 잠긴 지역을 DP 테이블에 표시
        for (int[] puddle : puddles) {
            dp[puddle[0]][puddle[1]] = -1;
        }
        
        // 출발점 (1, 1)을 초기화. 출발점으로부터의 경로는 1가지
        dp[1][1] = 1;
        
        // 격자판을 순회하면서 DP 테이블 채우기
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                // 현재 위치가 물에 잠긴 지역인 경우
                if (dp[i][j] == -1) {
                    // 경로 수를 0으로 설정 (더 이상 이 위치를 통해 이동할 수 없음)
                    dp[i][j] = 0;
                } else {
                    // 위쪽에서 오는 경로 수를 현재 위치에 더함
                    if (i > 1) {
                        dp[i][j] += dp[i-1][j];
                    }
                    // 왼쪽에서 오는 경로 수를 현재 위치에 더함
                    if (j > 1) {
                        dp[i][j] += dp[i][j-1];
                    }
                    
                    // 결과가 너무 커지지 않도록 1,000,000,007로 나눈 나머지를 저장
                    dp[i][j] %= 1_000_000_007;
                }
            }
        }
        
        // 최종적으로 도착점 (m, n)의 경로 수를 반환
        return dp[m][n];
    }
}
